# ุงููุฑุญูุฉ ูจูข โ ุชุญููู ุงูุฃุซุฑ ุงูุนุงุทูู ูููุฑุงุฑุงุช

"""
๐ ุงููุฏู: ุชุฌููุฒ ุงูููุงุฉ ุจูุฏุฑุฉ ุชุญููู ุจุณูุทุฉ ูุชุฃุซูุฑ ูุฑุงุฑุงุชูุง ุนูู ุงูุญุงูุฉ ุงูุนุงุทููุฉ ููุจูุฆุฉ ุงููุญูุทุฉ (ุงูุจุดุฑ ุฃู ุงูููู ุงูุฃุฎุฑู)ุ
ูุฎุทูุฉ ุฃููู ูููู ุงูุชุนุงุทู ูุงููุณุคูููุฉ ุงูุดุนูุฑูุฉ.
"""

class EmotionalImpactAnalyzer:
    def __init__(self):
        self.records = []

    def log_decision(self, decision, perceived_emotion):
        print(f"๐ ุชุณุฌูู ุงููุฑุงุฑ: '{decision}' | ุงูุชุฃุซูุฑ ุงูุนุงุทูู: {perceived_emotion}")
        self.records.append({"decision": decision, "emotion": perceived_emotion})

    def summary(self):
        print("\n๐ ููุฎุต ุงูุฃุซุฑ ุงูุนุงุทูู:")
        counts = {}
        for r in self.records:
            emotion = r["emotion"]
            counts[emotion] = counts.get(emotion, 0) + 1
        for emotion, count in counts.items():
            print(f"โข {emotion}: {count} ูุฑุฉ")

# ุชุฌุฑุจุฉ ูุญูู ุนุงุทูู
analyzer = EmotionalImpactAnalyzer()

analyzer.log_decision("ุญุธุฑ ูุญุฏุฉ ูุฑุชุจูุฉ", "ููู")
analyzer.log_decision("ูุดุงุฑูุฉ ุจูุงูุงุช ุจูุฌุงุญ", "ุฑุถุง")
analyzer.log_decision("ุฅุนุงุฏุฉ ุชุดุบูู ุงููุธุงู ูุฌุฃุฉ", "ุงุฑุชุจุงู")
analyzer.log_decision("ุฏุนู ููุงุฉ ุถุนููุฉ", "ุงุฑุชูุงุญ")

analyzer.summary()
