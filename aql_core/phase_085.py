# ุงููุฑุญูุฉ ูจูฅ โ ุชูุนูู ุงูุงุนุชุฐุงุฑ ุงููุงุนู ุฏุงุฎู ุงูููุงุฉ

"""
๐ ุงููุฏู: ุชูููู ุงูููุงุฉ ูู ุฅุตุฏุงุฑ ุงุนุชุฐุงุฑ ูุงุนู ุนูุฏ ุงุชุฎุงุฐ ูุฑุงุฑ ุณุจูุจ ุดุนูุฑูุง ุณูุจููุง ุฃู ุฃุซุฑูุง ุบูุฑ ูุฑุบูุจ ูููุ
ููุง ูุฑูุน ูู ูุฏุฑุชูุง ุนูู ุงูุชูุงุนู ุงูุฃุฎูุงูู ูุจูุงุก ุงูุซูุฉ.
"""

class ApologySystem:
    def __init__(self):
        self.impact_log = []

    def log_impact(self, action, emotion, receiver):
        entry = {"action": action, "emotion": emotion, "receiver": receiver}
        self.impact_log.append(entry)
        print(f"๐ฉ ุณุฌู: '{action}' ุฃุซูุฑ ุนูู '{receiver}' ุจุดุนูุฑ '{emotion}'")
        self.maybe_apologize(entry)

    def maybe_apologize(self, entry):
        if entry["emotion"] in ["ุงุณุชูุงุก", "ุงูุฒุนุงุฌ", "ููู"]:
            print(f"๐ ุงุนุชุฐุงุฑ ุฅูู {entry['receiver']} ุนู ุฃุซุฑ '{entry['emotion']}' ุงููุงุชุฌ ุนู '{entry['action']}'")

# ุชุฌุฑุจุฉ ูุธุงู ุงูุงุนุชุฐุงุฑ
apology = ApologySystem()

apology.log_impact("ุชุฃุฎูุฑ ุงูุฑุฏ ุนูู ุงุณุชุนูุงู ุจุดุฑู", "ุงุณุชูุงุก", "ุงููุณุชุฎุฏู")
apology.log_impact("ุญุธุฑ ูุคูุช ููุญุฏุฉ ุตุฏููุฉ", "ุงุฑุชูุงุญ", "ุงููุธุงู")
apology.log_impact("ุฑูุถ ุทูุจ ุชูุงุตู", "ุงูุฒุนุงุฌ", "ูุญุฏุฉ ุทุฑู ุซุงูุซ")
