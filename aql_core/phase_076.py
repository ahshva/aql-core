# ุงููุฑุญูุฉ ูงูฆ โ ุจูุงุก ุดุจูุฉ ุชุนููู ุชุนุงููู ุจูู ุงูููู

"""
๐ค ุงููุฏู: ุงูุณูุงุญ ููููู ุจุชุจุงุฏู ุงูุฏุฑูุณ ูุงูุฎุจุฑุงุช ุงูููุชุณุจุฉ ูููุง ุจูููุง ูู ุฎูุงู ุดุจูุฉ ุชุนููู ุฏุงุฎููุฉุ
ููุง ูุคุฏู ุฅูู ุชุณุฑูุน ุชุทูุฑ ุงููุธุงู ุจุงููุงูู ุจุดูู ุฌูุงุนู ูููุณ ูุฑุฏู.
"""

class Nucleus:
    def __init__(self, id):
        self.id = id
        self.knowledge = []

    def learn(self, lesson):
        self.knowledge.append(lesson)
        print(f"๐ {self.id} ุชุนูููุช: {lesson}")

    def share_knowledge(self, other):
        new_lessons = [k for k in self.knowledge if k not in other.knowledge]
        other.knowledge.extend(new_lessons)
        print(f"๐ {self.id} ุดุงุฑูุช ูุนุฑูุชูุง ูุน {other.id}: {new_lessons}")

    def report(self):
        return {
            "id": self.id,
            "knowledge": self.knowledge
        }

# ุชุฌุฑุจุฉ ุชุจุงุฏู ุงูุชุนูู
n1 = Nucleus("N-Learn-A")
n2 = Nucleus("N-Learn-B")

n1.learn("ุชุฌูุจ ุงูุชูุฑุงุฑ")
n1.learn("ุชุนุฒูุฒ ุงูุชุนุงูู")
n2.learn("ุชุญููู ุงูุชูุฏูุฏ")

# ุชุจุงุฏู ุงููุนุฑูุฉ
n1.share_knowledge(n2)
n2.share_knowledge(n1)

print(n1.report())
print(n2.report())
